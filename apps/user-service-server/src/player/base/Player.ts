/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  IsOptional,
  ValidateNested,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { GameAction } from "../../gameAction/base/GameAction";
import { PlayerGroup } from "../../playerGroup/base/PlayerGroup";
import { PlayerLocation } from "../../playerLocation/base/PlayerLocation";

@ObjectType()
class Player {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: () => [GameAction],
  })
  @ValidateNested()
  @Type(() => GameAction)
  @IsOptional()
  gameActions?: Array<GameAction>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nickname!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PlayerGroup],
  })
  @ValidateNested()
  @Type(() => PlayerGroup)
  @IsOptional()
  playerGroups?: Array<PlayerGroup>;

  @ApiProperty({
    required: false,
    type: () => [PlayerLocation],
  })
  @ValidateNested()
  @Type(() => PlayerLocation)
  @IsOptional()
  playerLocations?: Array<PlayerLocation>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Player as Player };
