/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerLocation } from "./PlayerLocation";
import { PlayerLocationCountArgs } from "./PlayerLocationCountArgs";
import { PlayerLocationFindManyArgs } from "./PlayerLocationFindManyArgs";
import { PlayerLocationFindUniqueArgs } from "./PlayerLocationFindUniqueArgs";
import { CreatePlayerLocationArgs } from "./CreatePlayerLocationArgs";
import { UpdatePlayerLocationArgs } from "./UpdatePlayerLocationArgs";
import { DeletePlayerLocationArgs } from "./DeletePlayerLocationArgs";
import { Location } from "../../location/base/Location";
import { Player } from "../../player/base/Player";
import { PlayerLocationService } from "../playerLocation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerLocation)
export class PlayerLocationResolverBase {
  constructor(
    protected readonly service: PlayerLocationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "read",
    possession: "any",
  })
  async _playerLocationsMeta(
    @graphql.Args() args: PlayerLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerLocation])
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "read",
    possession: "any",
  })
  async playerLocations(
    @graphql.Args() args: PlayerLocationFindManyArgs
  ): Promise<PlayerLocation[]> {
    return this.service.playerLocations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerLocation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "read",
    possession: "own",
  })
  async playerLocation(
    @graphql.Args() args: PlayerLocationFindUniqueArgs
  ): Promise<PlayerLocation | null> {
    const result = await this.service.playerLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerLocation)
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "create",
    possession: "any",
  })
  async createPlayerLocation(
    @graphql.Args() args: CreatePlayerLocationArgs
  ): Promise<PlayerLocation> {
    return await this.service.createPlayerLocation({
      ...args,
      data: {
        ...args.data,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerLocation)
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "update",
    possession: "any",
  })
  async updatePlayerLocation(
    @graphql.Args() args: UpdatePlayerLocationArgs
  ): Promise<PlayerLocation | null> {
    try {
      return await this.service.updatePlayerLocation({
        ...args,
        data: {
          ...args.data,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerLocation)
  @nestAccessControl.UseRoles({
    resource: "PlayerLocation",
    action: "delete",
    possession: "any",
  })
  async deletePlayerLocation(
    @graphql.Args() args: DeletePlayerLocationArgs
  ): Promise<PlayerLocation | null> {
    try {
      return await this.service.deletePlayerLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  @nestAccessControl.UseRoles({
    resource: "Location",
    action: "read",
    possession: "any",
  })
  async getLocation(
    @graphql.Parent() parent: PlayerLocation
  ): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerLocation
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
