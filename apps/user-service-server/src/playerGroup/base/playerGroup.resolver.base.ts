/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerGroup } from "./PlayerGroup";
import { PlayerGroupCountArgs } from "./PlayerGroupCountArgs";
import { PlayerGroupFindManyArgs } from "./PlayerGroupFindManyArgs";
import { PlayerGroupFindUniqueArgs } from "./PlayerGroupFindUniqueArgs";
import { CreatePlayerGroupArgs } from "./CreatePlayerGroupArgs";
import { UpdatePlayerGroupArgs } from "./UpdatePlayerGroupArgs";
import { DeletePlayerGroupArgs } from "./DeletePlayerGroupArgs";
import { Group } from "../../group/base/Group";
import { Player } from "../../player/base/Player";
import { PlayerGroupService } from "../playerGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerGroup)
export class PlayerGroupResolverBase {
  constructor(
    protected readonly service: PlayerGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "read",
    possession: "any",
  })
  async _playerGroupsMeta(
    @graphql.Args() args: PlayerGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerGroup])
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "read",
    possession: "any",
  })
  async playerGroups(
    @graphql.Args() args: PlayerGroupFindManyArgs
  ): Promise<PlayerGroup[]> {
    return this.service.playerGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "read",
    possession: "own",
  })
  async playerGroup(
    @graphql.Args() args: PlayerGroupFindUniqueArgs
  ): Promise<PlayerGroup | null> {
    const result = await this.service.playerGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerGroup)
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "create",
    possession: "any",
  })
  async createPlayerGroup(
    @graphql.Args() args: CreatePlayerGroupArgs
  ): Promise<PlayerGroup> {
    return await this.service.createPlayerGroup({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerGroup)
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "update",
    possession: "any",
  })
  async updatePlayerGroup(
    @graphql.Args() args: UpdatePlayerGroupArgs
  ): Promise<PlayerGroup | null> {
    try {
      return await this.service.updatePlayerGroup({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerGroup)
  @nestAccessControl.UseRoles({
    resource: "PlayerGroup",
    action: "delete",
    possession: "any",
  })
  async deletePlayerGroup(
    @graphql.Args() args: DeletePlayerGroupArgs
  ): Promise<PlayerGroup | null> {
    try {
      return await this.service.deletePlayerGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(@graphql.Parent() parent: PlayerGroup): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerGroup
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
