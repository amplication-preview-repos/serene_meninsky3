/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameAction } from "./GameAction";
import { GameActionCountArgs } from "./GameActionCountArgs";
import { GameActionFindManyArgs } from "./GameActionFindManyArgs";
import { GameActionFindUniqueArgs } from "./GameActionFindUniqueArgs";
import { CreateGameActionArgs } from "./CreateGameActionArgs";
import { UpdateGameActionArgs } from "./UpdateGameActionArgs";
import { DeleteGameActionArgs } from "./DeleteGameActionArgs";
import { Player } from "../../player/base/Player";
import { GameActionService } from "../gameAction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameAction)
export class GameActionResolverBase {
  constructor(
    protected readonly service: GameActionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "read",
    possession: "any",
  })
  async _gameActionsMeta(
    @graphql.Args() args: GameActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameAction])
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "read",
    possession: "any",
  })
  async gameActions(
    @graphql.Args() args: GameActionFindManyArgs
  ): Promise<GameAction[]> {
    return this.service.gameActions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameAction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "read",
    possession: "own",
  })
  async gameAction(
    @graphql.Args() args: GameActionFindUniqueArgs
  ): Promise<GameAction | null> {
    const result = await this.service.gameAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameAction)
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "create",
    possession: "any",
  })
  async createGameAction(
    @graphql.Args() args: CreateGameActionArgs
  ): Promise<GameAction> {
    return await this.service.createGameAction({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameAction)
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "update",
    possession: "any",
  })
  async updateGameAction(
    @graphql.Args() args: UpdateGameActionArgs
  ): Promise<GameAction | null> {
    try {
      return await this.service.updateGameAction({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameAction)
  @nestAccessControl.UseRoles({
    resource: "GameAction",
    action: "delete",
    possession: "any",
  })
  async deleteGameAction(
    @graphql.Args() args: DeleteGameActionArgs
  ): Promise<GameAction | null> {
    try {
      return await this.service.deleteGameAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: GameAction
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
