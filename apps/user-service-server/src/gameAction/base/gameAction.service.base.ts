/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GameAction as PrismaGameAction,
  Player as PrismaPlayer,
} from "@prisma/client";

export class GameActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameAction.count(args);
  }

  async gameActions(
    args: Prisma.GameActionFindManyArgs
  ): Promise<PrismaGameAction[]> {
    return this.prisma.gameAction.findMany(args);
  }
  async gameAction(
    args: Prisma.GameActionFindUniqueArgs
  ): Promise<PrismaGameAction | null> {
    return this.prisma.gameAction.findUnique(args);
  }
  async createGameAction(
    args: Prisma.GameActionCreateArgs
  ): Promise<PrismaGameAction> {
    return this.prisma.gameAction.create(args);
  }
  async updateGameAction(
    args: Prisma.GameActionUpdateArgs
  ): Promise<PrismaGameAction> {
    return this.prisma.gameAction.update(args);
  }
  async deleteGameAction(
    args: Prisma.GameActionDeleteArgs
  ): Promise<PrismaGameAction> {
    return this.prisma.gameAction.delete(args);
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.gameAction
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
